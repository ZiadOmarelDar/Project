# -*- coding: utf-8 -*-
"""Dangerous model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1orrMgBOc3kvsIo9djVVQQp0i6DNcVaer
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.svm import SVC

df = pd.read_csv("converted_danger.csv")
df.head()

"""# **Data Cleaning**"""

df = df.dropna(subset=["Dangerous"])
df["Dangerous"] = df["Dangerous"].map({"Yes": 1, "No": 0})

df

import plotly.express as px
fig = px.histogram(df, x="Dangerous", color="Dangerous",
                   color_discrete_sequence=px.colors.sequential.Plasma,
                   category_orders={"Dangerous": [0, 1]},
                   labels={"Dangerous": "Dangerous Category"},
                   title="Distribution of Dangerous Categories")

fig.update_xaxes(tickvals=[0, 1], ticktext=["Not Dangerous", "Dangerous"])

fig.update_yaxes(title_text="Count")

fig.show()

df_encoded = pd.get_dummies(df, columns=["AnimalName", "symptoms1", "symptoms2", "symptoms3", "symptoms4", "symptoms5"])

X = df_encoded.drop(columns=["Dangerous"])
y = df_encoded["Dangerous"]

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# **Random Forest**"""

from sklearn.ensemble import RandomForestClassifier

RFCmodel = RandomForestClassifier(n_estimators=100, random_state=42)
RFCmodel.fit(x_train, y_train)

# Make predictions
y_pred_random_forest = RFCmodel.predict(x_test)
accuracy = accuracy_score(y_test, y_pred_random_forest)
print("Accracy of the Random Forest Model is : ",round(accuracy*100),"%")

"""# **Decision Tree Classifier**"""

dt_model_class = DecisionTreeClassifier(criterion="gini", max_depth=5, random_state=42)
dt_model_class.fit(x_train, y_train)

y_pred_decision_tree_class = dt_model_class.predict(x_test)
accuracy = accuracy_score(y_test, y_pred_decision_tree_class)
print("Accuracy of the Decision Tree Model is : ",round(accuracy*100),"%")

"""#  **Logistic Regression**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy*100:.2f}')

"""# **SVM**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = SVC(kernel='linear')
model.fit(X_train, y_train)

# Make predictions

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy*100:.2f}')

"""# **Visualization**

Visualization
"""

models = ["Random Forest", "Decision Tree", "Logistic Regression", "SVC"]

accuracy = [88, 89, 86, 88]

colors = ["blue", "orange", "green", "red"]

plt.figure(figsize=(8, 5))
plt.bar(models, accuracy, color=colors)

import pickle

with open('Pet_Status.pkl', 'wb') as f:
    pickle.dump(dt_model_class, f)

from google.colab import files
files.download('Pet_Status.pkl')