# -*- coding: utf-8 -*-
"""pet_price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MKYIwOsEXU5R2iZLsMizTZbqzlkfPAOD
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
import xgboost as xgb
from xgboost import XGBRegressor
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

df = pd.read_csv("pet_price_dataset.csv")

df.head(20)

df.dropna(inplace=True)

df.isnull().sum()

print (df.columns)

df.info()

label_encoders = {}
categorical_columns = ["Animal", "Breed", "Gender", "Health Condition", "Size", "Color", "Location", "Training", "Popularity"]

for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

df.info()

X = df.drop(columns=["Price"])
y = df["Price"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

xgb_model = XGBRegressor(n_estimators=30, learning_rate=0.1, random_state=42)
xgb_model.fit(X_train, y_train)

y_pred_xgb = xgb_model.predict(X_test)
mae_xgb = mean_absolute_error(y_test, y_pred_xgb)
mse_xgb = mean_squared_error(y_test, y_pred_xgb)
r2_xgb = r2_score(y_test, y_pred_xgb)

print(f"XGBoost Results:")
print(f"MAE (Train): {mean_absolute_error(y_train, xgb_model.predict(X_train)):.2f}, MAE (Test): {mae_xgb:.2f}")
print(f"R² (Train): {r2_score(y_train, xgb_model.predict(X_train)):.2f}, R² (Test): {r2_xgb:.2f}")

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_xgb, alpha=0.5, color='purple', label="Predicted vs Actual")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='dashed', label="Perfect Prediction")
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("XGBoost: Predicted vs Actual Price")
plt.legend()
plt.show()

svr_model = Pipeline([
    ("scaler", StandardScaler()),
    ("svr", SVR(kernel="rbf", C=1000, gamma=0.1, epsilon=0.1))
])

svr_model.fit(X_train, y_train)

y_pred_svr = svr_model.predict(X_test)

mae_svr = mean_absolute_error(y_test, y_pred_svr)
r2_svr = r2_score(y_test, y_pred_svr)

print(f"SVR Results:")
print(f"MAE (Train): {mean_absolute_error(y_train, svr_model.predict(X_train)):.2f}, MAE (Test): {mae_svr:.2f}")
print(f"R² (Train): {r2_score(y_train, svr_model.predict(X_train)):.2f}, R² (Test): {r2_svr:.2f}")

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_svr, alpha=0.5, color='blue', label="Predicted vs Actual")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='dashed', label="Perfect Prediction")
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("SVR: Predicted vs Actual Price")
plt.legend()
plt.show()

rf_model = RandomForestRegressor(n_estimators=50, max_depth=15, min_samples_leaf=5, random_state=10)
rf_model.fit(X_train, y_train)

y_pred_train = rf_model.predict(X_train)
y_pred_test = rf_model.predict(X_test)

mae_train = mean_absolute_error(y_train, y_pred_train)
mae_test = mean_absolute_error(y_test, y_pred_test)
r2_train = r2_score(y_train, y_pred_train)
r2_test = r2_score(y_test, y_pred_test)

print("Random Forest Results:")
print(f"MAE (Train): {mae_train:.2f}, MAE (Test): {mae_test:.2f}")
print(f"R² (Train): {r2_train:.2f}, R² (Test): {r2_test:.2f}")

plt.figure(figsize=(6, 6))
plt.scatter(y_test, y_pred_test, alpha=0.5, color="green")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle="--", color="red")
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Random Forest: Actual vs Predicted Prices")
plt.show()

linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

y_pred_xgb = xgb_model.predict(X_test)

mae_xgb = mean_absolute_error(y_test, y_pred_xgb)
mse_xgb = mean_squared_error(y_test, y_pred_xgb)
r2_xgb = r2_score(y_test, y_pred_xgb)

y_pred_train = linear_model.predict(X_train)
y_pred_test = linear_model.predict(X_test)

mae_train = mean_absolute_error(y_train, y_pred_train)
mae_test = mean_absolute_error(y_test, y_pred_test)
r2_train = r2_score(y_train, y_pred_train)
r2_test = r2_score(y_test, y_pred_test)

print("Linear Regression Results:")
print(f"MAE (Train): {mae_train:.2f}, MAE (Test): {mae_test:.2f}")
print(f"R² (Train): {r2_train:.2f}, R² (Test): {r2_test:.2f}")

plt.figure(figsize=(6, 6))
plt.scatter(y_test, y_pred_test, alpha=0.5, color="blue")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle="--", color="red")
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Linear Regression: Actual vs Predicted Prices")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

models = ['XGBoost', 'SVR', 'Random Forest', 'Linear Regression']
mae_train = [12.77, 30.66, 16.84, 69.01]
mae_test = [16.90, 45.66, 23.10, 71.16]
r2_train = [0.96, 0.73, 0.95, 0.14]
r2_test = [0.93, 0.55, 0.90, 0.10]

sns.set(style="whitegrid")

plt.figure(figsize=(10, 5))
x = np.arange(len(models))
width = 0.3

plt.bar(x - width/2, mae_train, width=width, label='Train MAE', color='blue')
plt.bar(x + width/2, mae_test, width=width, label='Test MAE', color='red')

plt.xlabel("Model")
plt.ylabel("Mean Absolute Error (MAE)")
plt.title("MAE Comparison")
plt.xticks(ticks=x, labels=models)
plt.legend()
plt.show()

plt.figure(figsize=(10, 5))
plt.bar(x - width/2, r2_train, width=width, label='Train R²', color='green')
plt.bar(x + width/2, r2_test, width=width, label='Test R²', color='orange')

plt.xlabel("Model")
plt.ylabel("R² Score")
plt.title("R² Comparison")
plt.xticks(ticks=x, labels=models)
plt.legend()
plt.show()

import pickle

with open('pet_price.pkl', 'wb') as f:
    pickle.dump(xgb_model, f)

from google.colab import files
files.download('pet_price.pkl')

